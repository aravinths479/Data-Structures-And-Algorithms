In Java, the `final` keyword is used to denote that a variable, method, or
  class cannot be changed or overridden after its initial declaration or
  definition. Here's a breakdown of how `final` is used in different contexts:
  
  1. Final Variables:
  - When a variable is declared as `final`, its value cannot be altered once
  assigned. It becomes a constant.
  ```java
  public class Constants {
  final int MAX_VALUE = 100;
  }
  ```
  In this example, `MAX_VALUE` is a constant and cannot be modified after its
  initial assignment.
  
  2. Final Methods:
  - When a method is declared as `final` in a class, it means that the method
  cannot be overridden by any subclass.
  ```java
  public class Parent {
  final void display() {
  System.out.println("This method cannot be overridden.");
  }
  }
  
  public class Child extends Parent {
  // Compilation error: Cannot override the final method from Parent
  // void display() { }
  }
  ```
  In this example, the `display` method in the `Parent` class is marked as
  `final`, so any attempt to override it in a subclass will result in a
  compilation error.
  
  3. Final Classes:
  - When a class is declared as `final`, it means that no other class can
  extend it (i.e., it cannot be a superclass).
  ```java
  final class FinalClass {
  // Class implementation
  }
  
  // Compilation error: Cannot inherit from final class FinalClass
  // class AnotherClass extends FinalClass { }
  ```
  In this example, `FinalClass` is marked as `final`, so no other class can
  extend it.
  
  4. Final Arguments:
  - When a parameter is declared as `final` in a method, it means that the
  value of the parameter cannot be changed within the method.
  ```java
  public void process(final int value) {
  // Compilation error: Cannot assign a value to final variable 'value'
  // value = 10;
  System.out.println("Processing with value: " + value);
  }
  ```
  In this case, the `value` parameter is marked as `final`, preventing any
  attempt to modify its value within the `process` method.
  
  The `final` keyword promotes immutability, helps in creating constants, and
  ensures certain elements of a class or method remain unaltered or unextended.
  It can be particularly useful for design decisions and optimizations in code.